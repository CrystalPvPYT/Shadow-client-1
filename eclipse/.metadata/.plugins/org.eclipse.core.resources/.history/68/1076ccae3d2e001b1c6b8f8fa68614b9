package me.mystra.module.combat.killaura;

import java.util.ArrayList;
import java.util.List;

import io.netty.util.internal.ThreadLocalRandom;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.network.NetworkPlayerInfo;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.MathHelper;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.Vec3;

public class AuraUtils {
	
	public static double smoothAimSpeed = 2.5;
	public static ArrayList<EntityLivingBase> targets = new ArrayList<EntityLivingBase>();
	public static ArrayList<EntityLivingBase> blackList = new ArrayList<EntityLivingBase>();

	public static boolean hasEntity(Entity en) {
		if (en == null) {
			return false;
		}
		
		
		if (!AuraUtils.targets.isEmpty()) {
			for (EntityLivingBase en1 : AuraUtils.targets) {
				if (en1 == null) {
					continue;
				}
				if (en1.isEntityEqual(en)) {
					return true;
				}
			}
		}
		return false;
	}

	public static boolean blackEntity(Entity en) {
		if (en == null) {
			return false;
		}
		if (!AuraUtils.blackList.isEmpty()) {
			for (EntityLivingBase en1 : AuraUtils.blackList) {
				if (en1 == null) {
					continue;
				}
				if (en1.isEntityEqual(en)) {
					return true;
				}
			}
		}
		return false;
	}

	private static boolean disableAura = false;
	private static boolean reachExploit = false;
	private static int timercap = 15;
	private static double range = 7;
	private static boolean headsnap = false;
	private static double chargerange = 8.0;
	
	public static boolean getDisableAura() {
		return disableAura;
	}

	public static void setDisableAura(boolean disableAura) {
		AuraUtils.disableAura = disableAura;
	}

	public static void setReachExploit(boolean reachExploit) {
		AuraUtils.reachExploit = reachExploit;
	}

	public static boolean isReachExploit() {
		return reachExploit;
	}

	private static double packetTPRange = 10;

	public static double getPacketTPRange() {
		return packetTPRange;
	}

	public static void setPacketTPRange(double packetTPRange) {
		AuraUtils.packetTPRange = packetTPRange;
	}

	public static double getRange() {
		return range;
	}

	public static boolean getHeadsnap() {
		return headsnap;
	}

	public static int getAPS() {
		return timercap;
	}

	public static void setTimer(int set) {
		timercap = set;
	}

	public static void setRange(double value) {
		range = value;
	}

	public static void setHeadSnap(boolean selected) {
		headsnap = selected;
	}

	public static double getChargeRange() {
		return chargerange;
	}

	public static void setChargeRange(double chargerange) {
		AuraUtils.chargerange = chargerange;
	}

	public static double getSmoothAimSpeed() {
		return smoothAimSpeed;
	}

	public static void setSmoothAimSpeed(double smoothAimSpeed) {
		AuraUtils.smoothAimSpeed = smoothAimSpeed;
	}
	
	public static EntityLivingBase getClosestEntity(float range) {
		EntityLivingBase closestEntity = null;
		float mindistance = range;
		for (Object o : Minecraft.getMinecraft().theWorld.loadedEntityList) {
			if (isNotItem(o) && !(o instanceof EntityPlayerSP)) {
				EntityLivingBase en = (EntityLivingBase) o;
				if (!validEntity(en)) {
					continue;
				}
				if (Minecraft.getMinecraft().thePlayer.getDistanceToEntity(en) < mindistance) {
					mindistance = Minecraft.getMinecraft().thePlayer.getDistanceToEntity(en);
					closestEntity = en;
				}
			}
		}
		return closestEntity;
	}
	
	public static EntityLivingBase getClosestEntitySkipValidCheck(float range) {
		EntityLivingBase closestEntity = null;
		float mindistance = range;
		for (Object o : Minecraft.getMinecraft().theWorld.loadedEntityList) {
			if (isNotItem(o) && !(o instanceof EntityPlayerSP)) {
				EntityLivingBase en = (EntityLivingBase) o;
				if (Minecraft.getMinecraft().thePlayer.getDistanceToEntity(en) < mindistance) {
					mindistance = Minecraft.getMinecraft().thePlayer.getDistanceToEntity(en);
					closestEntity = en;
				}
			}
		}
		return closestEntity;
	}
	
	public static boolean isNotItem(Object o) {
		if (!(o instanceof EntityLivingBase)) {
			return false;
		}
		return true;
	}
	
	public static EntityLivingBase getClosestEntityToEntity(float range, Entity ent) {
		EntityLivingBase closestEntity = null;
		float mindistance = range;
		for (Object o : Minecraft.getMinecraft().theWorld.loadedEntityList) {
			if (isNotItem(o) && !ent.isEntityEqual((EntityLivingBase) o)) {
				EntityLivingBase en = (EntityLivingBase) o;
				if (ent.getDistanceToEntity(en) < mindistance) {
					mindistance = ent.getDistanceToEntity(en);
					closestEntity = en;
				}
			}
		}
		return closestEntity;
	}
	
	public static float[] getFacePos(Vec3 vec) {
		double diffX = vec.xCoord + 0.5 - Minecraft.getMinecraft().thePlayer.posX;
		double diffY = vec.yCoord + 0.5
				- (Minecraft.getMinecraft().thePlayer.posY + Minecraft.getMinecraft().thePlayer.getEyeHeight());
		double diffZ = vec.zCoord + 0.5 - Minecraft.getMinecraft().thePlayer.posZ;
		double dist = MathHelper.sqrt_double(diffX * diffX + diffZ * diffZ);
		float yaw = (float) (Math.atan2(diffZ, diffX) * 180.0D / Math.PI) - 90.0F;
		float pitch = (float) -(Math.atan2(diffY, dist) * 180.0D / Math.PI);
		return new float[] {
				Minecraft.getMinecraft().thePlayer.rotationYaw
						+ MathHelper.wrapAngleTo180_float(yaw - Minecraft.getMinecraft().thePlayer.rotationYaw),
				Minecraft.getMinecraft().thePlayer.rotationPitch
						+ MathHelper.wrapAngleTo180_float(pitch - Minecraft.getMinecraft().thePlayer.rotationPitch) };
	}
	
	public static float[] getFacePosEntity(Entity en) {
		if (en == null) {
			return new float[] { Minecraft.getMinecraft().thePlayer.rotationYawHead,
					Minecraft.getMinecraft().thePlayer.rotationPitch };
		}
		return getFacePos(new Vec3(en.posX - 0.5, en.posY + (en.getEyeHeight() - en.height / 1.5), en.posZ - 0.5));
	}
		
			public static float[] faceEntitySmooth(double curYaw, double curPitch, double intendedYaw, double intendedPitch,
					double yawSpeed, double pitchSpeed) {
				float yaw = (float) updateRotation((float) curYaw, (float) intendedYaw, (float) yawSpeed);
				float pitch = (float) updateRotation((float) curPitch, (float) intendedPitch, (float) pitchSpeed);
				return new float[] { yaw, pitch };
			}

			/**
			 * Current: Die jetztige Playerroation
			 * Intended: Wo der Spieler hinaimen soll
			 * Factor: Kann sowohl als speed, als auch als maxFOV genutzt werden. In der
			 * Killaura wird beides ausgenutzt
			 */
			public static float updateRotation(float current, float intended, float factor) {
				float var4 = MathHelper.wrapAngleTo180_float(intended - current);

				if (var4 > factor) {
					var4 = factor;
				}

				if (var4 < -factor) {
					var4 = -factor;
				}

				return current + var4;
			}

			public static float[] rotations(Entity target) {
				double x = target.posX - Minecraft.getMinecraft().thePlayer.posX;
				double z = target.posZ - Minecraft.getMinecraft().thePlayer.posZ;
				double y = target.posY + target.getEyeHeight() * 0.75D - (Minecraft.getMinecraft().thePlayer.posY + Minecraft.getMinecraft().thePlayer.getEyeHeight());

				double distance = MathHelper.sqrt_double(x * x + z * z);

				float yaw = (float) (Math.atan2(z, x) * 180.0D / Math.PI) - 90.0F;
				float pitch = (float) -((Math.atan2(y, distance) * 180.0D / Math.PI));
				return new float[] { yaw, pitch };
			}

			public static boolean checkEntityID(Entity entity) {
				boolean check;
				if (entity.getEntityId() <= 1070000000 && entity.getEntityId() > -1) {
					check = true;
				} else {
					check = false;
				}
				return check;
			}

			public static boolean isInTablist(Entity entity) {
				if (Minecraft.getMinecraft().isSingleplayer()) {
					return false;
				}

				for (Object o : Minecraft.getMinecraft().getNetHandler().getPlayerInfoMap()) {
					NetworkPlayerInfo playerInfo = (NetworkPlayerInfo) o;
					if (playerInfo.getGameProfile().getName().equalsIgnoreCase(entity.getName())) {
						return true;
					}
				}
				return false;
			}

			// Skidded btw
			public static Entity raycast(double range, Entity entity) {
				Entity var2 = Minecraft.getMinecraft().thePlayer;
				Vec3 var9 = entity.getPositionVector().add(new Vec3(0, entity.getEyeHeight(), 0));
				Vec3 var7 = Minecraft.getMinecraft().thePlayer.getPositionVector().add(new Vec3(0, Minecraft.getMinecraft().thePlayer.getEyeHeight(), 0));
				Vec3 var10 = null;
				float var11 = 1.0F;
				AxisAlignedBB a = Minecraft.getMinecraft().thePlayer.getEntityBoundingBox()
						.addCoord(var9.xCoord - var7.xCoord, var9.yCoord - var7.yCoord, var9.zCoord - var7.zCoord)
						.expand(var11, var11, var11);
				List var12 = Minecraft.getMinecraft().theWorld.getEntitiesWithinAABBExcludingEntity(var2, a);
				double var13 = range + 0.5;
				Entity b = null;
				for (int var15 = 0; var15 < var12.size(); ++var15) {
					Entity var16 = (Entity) var12.get(var15);

					if (var16.canBeCollidedWith()) {
						float var17 = var16.getCollisionBorderSize();
						AxisAlignedBB var18 = var16.getEntityBoundingBox().expand((double) var17, (double) var17,
								(double) var17);
						MovingObjectPosition var19 = var18.calculateIntercept(var7, var9);

						if (var18.isVecInside(var7)) {
							if (0.0D < var13 || var13 == 0.0D) {
								b = var16;
								var10 = var19 == null ? var7 : var19.hitVec;
								var13 = 0.0D;
							}
						} else if (var19 != null) {
							double var20 = var7.distanceTo(var19.hitVec);

							if (var20 < var13 || var13 == 0.0D) {
								b = var16;
								var10 = var19.hitVec;
								var13 = var20;
							}
						}
					}
				}
				return b;
			}

			public static double getRandomDouble(double min, double max) {
				return ThreadLocalRandom.current().nextDouble(min, max + 1);
			}



}
