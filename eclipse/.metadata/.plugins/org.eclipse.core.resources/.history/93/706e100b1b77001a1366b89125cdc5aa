package mystra.mods;

import java.util.Iterator;

import org.darkstorm.minecraft.gui.component.BoundedRangeComponent.ValueDisplay;
import org.lwjgl.input.Keyboard;

import mystra.main.Category;
import mystra.notifications.Notification;
import mystra.notifications.NotificationManager;
import mystra.notifications.NotificationType;
import mystra.utils.Wrapper;
import mystra.valuesystem.BooleanValue;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;

public class Killaura extends Module {
	
	private int ticks = 0;
	
    public Killaura() {
		super("KillAura", Keyboard.KEY_R, Category.COMBAT);
	}
   

    	private BooleanValue players = new BooleanValue("Players", true);
    	private BooleanValue mob = new BooleanValue("Mob", false);
    	private BooleanValue locked = new BooleanValue("Locked View", false);
        private BooleanValue invisiableEntitys = new BooleanValue("Invisiable Entitys", true);
        private BooleanValue packetCrit = new BooleanValue("Packet Crit", false);
        private BooleanValue jumpCrit = new BooleanValue("Jump Crit", false);
        private BooleanValue multiAura = new BooleanValue("MultiAura", false);
        private BooleanValue autoDelay = new BooleanValue("Auto Delay", false);


    @Override
    public void onMultiAura() {

        if (multiAura.getObject()) {

            for (Object o : mc.theWorld.loadedEntityList) {
                if (o instanceof EntityLivingBase) {
                    EntityLivingBase entity = (EntityLivingBase) o;

                    if (!(entity instanceof EntityPlayerSP) && isValid(entity)) {
                        faceTarget(entity, Float.MAX_VALUE, Float.MAX_VALUE);
                        getPlayer().rotationPitch += 9.0E-4F;

                        if (time.hasTimePassedM(delay.getValue().intValue())) {
                            getPlayer().swingArm(EnumHand.MAIN_HAND);
                            getMinecraft().playerController.attackEntity(getPlayer(), entity);
                            time.updateLastMS();
                        }
                    }
                }
            }
        }


        updateTargets();

        for (Object y : getWorld().loadedEntityList) {

            if ((y instanceof EntityLiving)) {
                EntityLiving e = (EntityLiving) y;

                if ((isValid(e)) && (e.getDistanceToEntity(getPlayer()) < target.getDistanceToEntity(getPlayer()))) {
                    target = e;
                }
            }
        }

        if (isValid(target)) {
            if (isInStareRange(target)) {
                faceTarget(target, Float.MAX_VALUE, Float.MAX_VALUE);
                getPlayer().rotationPitch += 9.0E-4F;
            }

            faceTarget(target, Float.MAX_VALUE, Float.MAX_VALUE);
            getPlayer().rotationPitch += 9.0E-4F;
            attackEntity();
        }
    }

    private void updateTargets() {

        for (Object o : getWorld().loadedEntityList) {
            if ((o instanceof EntityLivingBase)) {
                EntityLivingBase entity = (EntityLivingBase) o;

                if ((!(entity instanceof EntityPlayerSP)) && (isValid(entity))) {
                    target = entity;
                }
            }
        }
    }

    private void attackEntity() {

        time.updateMS();

        if (isValid(target)) {
            faceTarget(target, Float.MAX_VALUE, Float.MAX_VALUE);
            getPlayer().rotationPitch += 9.0E-4F;

            1.9 Aura
            if (autoDelay.getValue()) {

                if (getPlayer().getCooledAttackStrength(0) == 1) {

                    getMinecraft().playerController.attackEntity(getPlayer(), target);
                    getPlayer().swingArm(EnumHand.MAIN_HAND);

                }
            } else if (time.hasTimePassedM(delay.getValue().intValue())) {
                getMinecraft().playerController.attackEntity(getPlayer(), target);
                getPlayer().swingArm(EnumHand.MAIN_HAND);
                time.updateLastMS();
            }

        }
    }

    private void faceTarget(Entity entity, float i, float j) {

        double xPos = entity.posX - getPlayer().posX;
        double yPos = entity.posY - getPlayer().posY;
        double k;

        if (entity instanceof EntityLivingBase) {
            EntityLivingBase entityLivingBase = (EntityLivingBase) entity;
            k = entityLivingBase.posY + entityLivingBase.getEyeHeight() - (getPlayer().posY - getPlayer().getEyeHeight());
        } else {
            k = (entity.getEntityBoundingBox().minY + entity.getEntityBoundingBox().maxY) / 2D - (getPlayer().posY + getPlayer().getEyeHeight());
        }

        double l = MathHelper.sqrt(xPos * xPos + yPos * yPos);
        float m = (float) (Math.atan2(yPos, xPos) * 180D / Math.PI) - 90F;
        float n = (float) (Math.atan2(k - ((entity instanceof EntityLiving) ? 0.5F : 0F), l) * 180D / Math.PI);
        pitch = changeRoation(getPlayer().rotationPitch, n, j);
        yaw = changeRoation(getPlayer().rotationYaw, m, i);

        if (locked.getValue()) {
            getPlayer().rotationPitch = pitch;
            getPlayer().rotationYaw = yaw;
        }
    }

    private float changeRoation(float rotationYaw, float m, float i) {

        float angle = MathHelper.wrapDegrees(m - rotationYaw);

        if (angle > i) {
            angle = i;
        }

        if (angle < -i) {
            angle = -i;
        }

        return rotationYaw + angle;
    }


    public boolean isValid(EntityLivingBase entity) {

        if (player.getValue().booleanValue() && ((entity instanceof EntityPlayer)) && (isInAttackRange(entity)) && (entity.ticksExisted > 30) && (entity.getHealth() > 0.0F) && (!entity.isDead)) {
            if ((!entity.getName().startsWith("Body #"))) {
                if (invisiableEntitys.getValue().booleanValue() && (!entity.isInvisible()) && (entity.canEntityBeSeen(getPlayer()))) {
                    return true;
                }

                if (entity.canEntityBeSeen(getPlayer())) {
                    return true;
                }

                return true;
            }
        }

        if (mob.getValue().booleanValue() && ((entity instanceof EntityLivingBase)) && (!(entity instanceof EntityPlayer)) && (isInStareRange(entity)) && (entity.ticksExisted > 30) && (!entity.isDead)) {
            if (!entity.getName().startsWith("Body #")) {
                if (invisiableEntitys.getValue().booleanValue() && (!entity.isInvisible()) && (entity.canEntityBeSeen(getPlayer()))) {
                    return true;
                }

                if (entity.canEntityBeSeen(getPlayer())) {
                    return true;
                }

                return true;
            }
        }

        return false;
    }


    public boolean isInAttackRange(Entity target) {

        return target.getDistanceToEntity(getPlayer()) <= range.value.doubleValue();
    }

    public boolean isInStareRange(Entity target) {

        return target.getDistanceToEntity(getPlayer()) <= range.value.doubleValue() + 0.2D;
    }

    @Override
    public void onEvent(Event event) {

    }
}