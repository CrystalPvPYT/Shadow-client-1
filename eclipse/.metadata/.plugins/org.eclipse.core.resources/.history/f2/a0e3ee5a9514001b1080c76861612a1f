package me.mystra.module.combat;

import java.awt.Color;
import java.util.ArrayList;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;

import me.mystra.Mystra;
import me.mystra.clickgui.settings.Setting;
import me.mystra.event.EventManager;
import me.mystra.event.EventTarget;
import me.mystra.event.events.Event3D;
import me.mystra.event.events.EventPacketSendQueue;
import me.mystra.event.events.EventPreMotionUpdate;
import me.mystra.event.events.EventSendPacket;
import me.mystra.event.events.EventUpdate;
import me.mystra.module.Category;
import me.mystra.module.Module;
import me.mystra.utils.RenderUtils;
import me.mystra.utils.TimeHelper;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityAnimal;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemSword;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.util.MathHelper;

public class Aura extends Module {
	private float delay;
	public static float range;
	public static EntityLivingBase ThisIsTheEntityThatThePlayerIsHittingTo;
	public boolean IsHittingEntityFakeBoolean = false;
	private TimeHelper timeHelper = new TimeHelper();
	public float yaw, pitch;

	public Aura() {
		super("Aura", Keyboard.KEY_R, Category.COMBAT);

		ArrayList<String> options = new ArrayList<>();
        options.add("Normal");
        options.add("Spiral");
        Mystra.instance.settingsManager.rSetting(new Setting("CircleESP Mode", this, "Normal", options));
		Mystra.instance.settingsManager.rSetting(new Setting("KillDelay", this, 8.0, 1, 100.0, false));
		Mystra.instance.settingsManager.rSetting(new Setting("KillRange", this, 4.0, 1.0, 6.0, false));
		Mystra.instance.settingsManager.rSetting(new Setting("CircleESP Range", this, 1.80, 1.0, 6.0, false));
		Mystra.instance.settingsManager.rSetting(new Setting("KillAnimals", this, false));
        Mystra.instance.settingsManager.rSetting(new Setting("KillAutoBlock", this, true));
        Mystra.instance.settingsManager.rSetting(new Setting("KillInvisibles", this, false));
        Mystra.instance.settingsManager.rSetting(new Setting("KillMonsters", this, false));
        Mystra.instance.settingsManager.rSetting(new Setting("KillPlayers", this, true));
        Mystra.instance.settingsManager.rSetting(new Setting("KillTeams", this, false));
        Mystra.instance.settingsManager.rSetting(new Setting("KillVillagers", this, false));
        Mystra.instance.settingsManager.rSetting(new Setting("Rotations", this, false));
        Mystra.instance.settingsManager.rSetting(new Setting("TargetHUD", this, true));

	}

	@EventTarget
	public void onEvent(EventUpdate e) {
		delay = ((float) Mystra.instance.settingsManager.getSettingByName("KillDelay").getValDouble());
		range = ((float) Mystra.instance.settingsManager.getSettingByName("KillRange").getValDouble());
	}

	@EventTarget
	public void onTick(EventPreMotionUpdate event) {
		for (Object o : mc.theWorld.loadedEntityList) {
			if (o instanceof EntityLivingBase) {
				if (o != mc.thePlayer) {
					EntityLivingBase e = (EntityLivingBase) o;
					
					boolean block = check(e) && Mystra.instance.settingsManager.getSettingByName("KillAutoBlock").getValBoolean() && mc.thePlayer.getHeldItem() != null && mc.thePlayer.getHeldItem().getItem() != null && mc.thePlayer.getHeldItem().getItem() instanceof ItemSword;
					
					if(block && e.getDistanceToEntity(mc.thePlayer) < range) {
			        	this.mc.thePlayer.setItemInUse(this.mc.thePlayer.getHeldItem(), this.mc.thePlayer.getHeldItem().getMaxItemUseDuration());
					}
					
					if (check(e) && (timeHelper.isDelayComplete(1000 / delay))) {
						attack(e);
						ThisIsTheEntityThatThePlayerIsHittingTo = e;
					}
				}
			}
		}
		if(ThisIsTheEntityThatThePlayerIsHittingTo == null) {
			return;
		}
		float rot[] = getRotationsNeeded(ThisIsTheEntityThatThePlayerIsHittingTo);
		event.setPitch(rot[1]);
		event.setYaw(rot[0]);
		/*this.yaw = rot[0];
		this.pitch = rot[1];*/
		this.IsHittingEntityFakeBoolean = true;
	}
	private boolean check(EntityLivingBase e) {
		if (e.isInvisible())
			if(Mystra.instance.settingsManager.getSettingByName("KillInvisibles").getValBoolean()) {
				return true;
			} else {
				return false;
			}
		if (e instanceof EntityPlayer)
			if(Mystra.instance.settingsManager.getSettingByName("KillPlayers").getValBoolean()) {
				return true;
			} else {
				return false;
			}
		if (e instanceof EntityAnimal)
			if(Mystra.instance.settingsManager.getSettingByName("KillAnimals").getValBoolean()) {
				return true;
			} else {
				return false;
			}
		if (e instanceof EntityMob)
			if(Mystra.instance.settingsManager.getSettingByName("KillMonsters").getValBoolean()) {
				return true;
			} else {
				return false;
			}
		if (e instanceof EntityVillager)
			if(Mystra.instance.settingsManager.getSettingByName("KillVillagers").getValBoolean()) {
				return true;
			} else {
				return false;
			}
		/*if (e.getHealth() <= 0)
			if(Mystra.instance.settingsManager.getSettingByName("KillAfterDeath").getValBoolean()) {
				return true;
			} else {
				return false;
			}*/
		if (e.ticksExisted > 0)
			return false;
		if (e.getEntityId() > 1070000000)
			return false;
		return true;
	}
	private void attack(EntityLivingBase e) {
		if (e.getDistanceToEntity(mc.thePlayer) <= range) {
			if (IsHittingEntityFakeBoolean) {
				mc.thePlayer.swingItem();
				mc.thePlayer.sendQueue.addToSendQueue(new C02PacketUseEntity(e, C02PacketUseEntity.Action.ATTACK));
				timeHelper.setLastMS();
				ThisIsTheEntityThatThePlayerIsHittingTo = null;
				IsHittingEntityFakeBoolean = false;
			}
		}
	}
	public static float[] getRotationsNeeded(Entity entity) {
		float yaw;
		float pitch;
		double diffX = entity.posX - Minecraft.getMinecraft().thePlayer.posX;
		double diffY;
		if ((entity instanceof EntityLivingBase)) {
			EntityLivingBase entityLivingBase = (EntityLivingBase) entity;
			diffY = entityLivingBase.posY + entityLivingBase.getEyeHeight() * 0.9D - (Minecraft.getMinecraft().thePlayer.posY + Minecraft.getMinecraft().thePlayer.getEyeHeight());
		} else {
			diffY = (entity.boundingBox.minY + entity.boundingBox.maxY) / 2.0D - (Minecraft.getMinecraft().thePlayer.posY + Minecraft.getMinecraft().thePlayer.getEyeHeight());
		}
		double diffZ = entity.posZ - Minecraft.getMinecraft().thePlayer.posZ;
		double dist = MathHelper.sqrt_double(diffX * diffX + diffZ * diffZ);
		yaw = (float) (Math.atan2(diffZ, diffX) * 180.0D / 3.141592653589793D) - 90.0F;
		pitch = (float) -(Math.atan2(diffY, dist) * 180.0D / 3.141592653589793D);
		return new float[] {
				Minecraft.getMinecraft().thePlayer.rotationYaw + MathHelper.wrapAngleTo180_float(yaw - Minecraft.getMinecraft().thePlayer.rotationYaw), Minecraft.getMinecraft().thePlayer.rotationPitch + MathHelper.wrapAngleTo180_float(pitch - Minecraft.getMinecraft().thePlayer.rotationPitch) 
		};
	}
	@EventTarget
	public void sendPacketQueue(EventPacketSendQueue event) {
		Packet packet = event.getPacket();
		if(packet instanceof C03PacketPlayer) {
			if(ThisIsTheEntityThatThePlayerIsHittingTo == null) {
				return;
			}
			if(ThisIsTheEntityThatThePlayerIsHittingTo.getDistanceToEntity(mc.thePlayer) <= range) {
				float rot[] = getRotationsNeeded(ThisIsTheEntityThatThePlayerIsHittingTo);
				if(Mystra.instance.settingsManager.getSettingByName("Rotations").getValBoolean()) {
				/*C03PacketPlayer.yaw = rot[0];
				C03PacketPlayer.pitch = rot[1];*/
				/*mc.thePlayer.rotationYaw = rot[0];
				mc.thePlayer.rotationPitch = rot[1];*/
				mc.thePlayer.rotationYawHead = rot[0];
				mc.thePlayer.renderYawOffset = rot[0];
				}
			}
		}
	}
	@EventTarget
	public void onRender3D(Event3D event) {
		if(this.isToggled()) {
			if(ThisIsTheEntityThatThePlayerIsHittingTo == null) {
				return;
			}
			if(ThisIsTheEntityThatThePlayerIsHittingTo.getDistanceToEntity(mc.thePlayer) < range) {
				drawCircleESP(ThisIsTheEntityThatThePlayerIsHittingTo, event.getPartialTicks(), Mystra.instance.settingsManager.getSettingByName("CircleESP Range").getValDouble());
			}
		}
	}
	
	public static void drawCircleESP(Entity entity, float partialTicks, double rad) {
		String mode = Mystra.instance.settingsManager.getSettingByName("CircleESP Mode").getValString();
        GL11.glPushMatrix();
        GL11.glDisable(3553);
        GL11.glEnable(2848);
        GL11.glEnable(2881);
        GL11.glEnable(2832);
        GL11.glEnable(3042);
        GL11.glBlendFunc(770, 771);
        GL11.glHint(3154, 4354);
        GL11.glHint(3155, 4354);
        GL11.glHint(3153, 4354);
        GL11.glDisable(2929);
        GL11.glDepthMask(false);
        GL11.glLineWidth(1.0F);
        GL11.glBegin(3);
        double x = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * partialTicks - Minecraft.getMinecraft().getRenderManager().viewerPosX;
        double y = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * partialTicks - Minecraft.getMinecraft().getRenderManager().viewerPosY;
        double z = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * partialTicks - Minecraft.getMinecraft().getRenderManager().viewerPosZ;
        float r = 0.003921569F * Color.WHITE.getRed();
        float g = 0.003921569F * Color.WHITE.getGreen();
        float b = 0.003921569F * Color.WHITE.getBlue();
        double pix2 = 6.283185307179586D;
        int[] counter = {1};
        for (int i = 0; i <= 120; i++) {
            GL11.glColor4f(255, 255, 255, 255);
            if (mode.equalsIgnoreCase("Normal")) {
            	GL11.glVertex3d(x + rad * Math.cos(i * 6.283185307179586D / 45.0D), y, z + rad * Math.sin(i * 6.283185307179586D / 45.0D));
            } else if (mode.equalsIgnoreCase("Spiral")) {
            	GL11.glVertex3d(x + rad * Math.cos(i * 7.683185307179586D / 45.0D), y, z + rad * Math.sin(i * 7.683185307179586D / 45.0D));
            	GL11.glVertex3d(x + rad * Math.cos(i * 6.483185307179586D / 45.0D), y, z + rad * Math.sin(i * 6.483185307179586D / 45.0D));
            } 
            counter[0] -= 1;
        }
        GL11.glEnd();
        GL11.glDepthMask(true);
        GL11.glEnable(2929);
        GL11.glEnable(2848);
        GL11.glEnable(2881);
        GL11.glEnable(2832);
        GL11.glEnable(3042);
        GL11.glBlendFunc(770, 771);
        GL11.glHint(3154, 4354);
        GL11.glHint(3155, 4354);
        GL11.glHint(3153, 4354);
        GL11.glEnable(3553);
        GL11.glPopMatrix();
    }
	
	public void onEnable(){
		EventManager.register(this);
		TimeHelper.reset();
	}
	public void onDisable(){
		EventManager.unregister(this);
		ThisIsTheEntityThatThePlayerIsHittingTo = null;
		IsHittingEntityFakeBoolean = false;
		TimeHelper.reset();
	}
}